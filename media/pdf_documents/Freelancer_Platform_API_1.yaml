openapi: 3.0.3
info:
  title: Freelancer Platform API
  version: 1.0.0
  description: API for managing user accounts, profiles, and portfolios in a freelancer-client
    platform.
paths:
  /api/v1/academy/trainings/:
    get:
      operationId: academy_trainings_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - academy
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTrainingList'
          description: ''
    post:
      operationId: academy_trainings_create
      tags:
      - academy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Training'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Training'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Training'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
          description: ''
  /api/v1/academy/trainings/{id}/:
    get:
      operationId: academy_trainings_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - academy
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
          description: ''
    put:
      operationId: academy_trainings_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - academy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Training'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Training'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Training'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
          description: ''
    patch:
      operationId: academy_trainings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - academy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTraining'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTraining'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTraining'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
          description: ''
    delete:
      operationId: academy_trainings_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - academy
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/accounts/auth/login/:
    post:
      operationId: accounts_auth_login_create
      description: Authenticate user and return JWT tokens.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: JWT tokens and user type returned.
        '400':
          description: Invalid credentials.
  /api/v1/accounts/auth/logout/:
    post:
      operationId: accounts_auth_logout_create
      description: Invalidate JWT refresh token.
      tags:
      - accounts
      requestBody:
        content:
          refresh:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '205':
          description: Logged out successfully.
        '400':
          description: Invalid refresh token.
  /api/v1/accounts/auth/password-change/:
    post:
      operationId: accounts_auth_password_change_create
      description: Change user password.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: Password updated.
        '400':
          description: Invalid input.
  /api/v1/accounts/auth/password-reset/:
    post:
      operationId: accounts_auth_password_reset_create
      description: Request password reset email.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: Password reset email sent.
        '400':
          description: Invalid email.
  /api/v1/accounts/auth/password-reset-confirm/{uidb64}/{token}/:
    post:
      operationId: accounts_auth_password_reset_confirm_create
      description: Confirm password reset.
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: Password reset successful.
        '400':
          description: Invalid token.
  /api/v1/accounts/auth/register/:
    post:
      operationId: accounts_auth_register_create
      description: Register a new user and send verification email.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '201':
          description: User created, verification email sent.
        '400':
          description: Invalid input.
  /api/v1/accounts/auth/resend-verification/{user_id}/:
    post:
      operationId: accounts_auth_resend_verification_create
      description: Resend verification email.
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: Verification email resent.
        '400':
          description: User not found or already verified.
  /api/v1/accounts/auth/verify-email/{uidb64}/{token}/:
    get:
      operationId: accounts_auth_verify_email_retrieve
      description: Verify user email with token.
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: Email verified, JWT tokens returned.
        '400':
          description: Invalid or expired token.
  /api/v1/accounts/client-form/:
    get:
      operationId: accounts_client_form_retrieve
      description: Retrieve client profile form data.
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientForm'
          description: ''
    post:
      operationId: accounts_client_form_create
      description: Create or update client profile.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientForm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientForm'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: Client profile updated.
        '400':
          description: Invalid input.
  /api/v1/accounts/client-profiles/:
    get:
      operationId: accounts_client_profiles_list
      description: List client profiles (admin or owner only).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedClientProfileList'
          description: ''
    post:
      operationId: accounts_client_profiles_create
      description: Create or update client profile (owner or admin only).
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientProfile'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
          description: ''
  /api/v1/accounts/client-profiles/{id}/:
    get:
      operationId: accounts_client_profiles_retrieve
      description: Retrieve client profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this client profile.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
          description: ''
    put:
      operationId: accounts_client_profiles_update
      description: Update client profile (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this client profile.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientProfile'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
          description: ''
    patch:
      operationId: accounts_client_profiles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this client profile.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedClientProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedClientProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedClientProfile'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
          description: ''
    delete:
      operationId: accounts_client_profiles_destroy
      description: Delete client profile (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this client profile.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: Client profile deleted.
  /api/v1/accounts/freelancer-form/:
    get:
      operationId: accounts_freelancer_form_retrieve
      description: Retrieve freelancer profile form data.
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerForm'
          description: ''
    post:
      operationId: accounts_freelancer_form_create
      description: Create or update freelancer profile.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FreelancerForm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FreelancerForm'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: Freelancer profile updated.
        '400':
          description: Invalid input.
  /api/v1/accounts/freelancer-profiles/:
    get:
      operationId: accounts_freelancer_profiles_list
      description: List freelancer profiles (admin or owner only).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFreelancerProfileList'
          description: ''
    post:
      operationId: accounts_freelancer_profiles_create
      description: Create or update freelancer profile (owner or admin only).
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FreelancerProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FreelancerProfile'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
          description: ''
  /api/v1/accounts/freelancer-profiles/{id}/:
    get:
      operationId: accounts_freelancer_profiles_retrieve
      description: Retrieve freelancer profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this freelancer profile.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
          description: ''
    put:
      operationId: accounts_freelancer_profiles_update
      description: Update freelancer profile (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this freelancer profile.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FreelancerProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FreelancerProfile'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
          description: ''
    patch:
      operationId: accounts_freelancer_profiles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this freelancer profile.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFreelancerProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFreelancerProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFreelancerProfile'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
          description: ''
    delete:
      operationId: accounts_freelancer_profiles_destroy
      description: Delete freelancer profile (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this freelancer profile.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: Freelancer profile deleted.
  /api/v1/accounts/languages/:
    get:
      operationId: accounts_languages_list
      description: List or create languages (admin only).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
    post:
      operationId: accounts_languages_create
      description: Create a new language (admin only).
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Language'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Language'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
  /api/v1/accounts/languages/{id}/:
    get:
      operationId: accounts_languages_retrieve
      description: Retrieve language details.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this language.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
    put:
      operationId: accounts_languages_update
      description: Update language (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this language.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Language'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Language'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
    patch:
      operationId: accounts_languages_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this language.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLanguage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLanguage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLanguage'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
    delete:
      operationId: accounts_languages_destroy
      description: Delete language (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this language.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: Language deleted.
  /api/v1/accounts/profiles/:
    get:
      operationId: accounts_profiles_list
      description: List profiles (admin only) or retrieve specific profile.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProfileList'
          description: ''
    post:
      operationId: accounts_profiles_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/v1/accounts/profiles/{id}/:
    get:
      operationId: accounts_profiles_retrieve
      description: Retrieve user profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    put:
      operationId: accounts_profiles_update
      description: Update user profile (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '400':
          description: Invalid input.
    patch:
      operationId: accounts_profiles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    delete:
      operationId: accounts_profiles_destroy
      description: Delete user profile (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: Profile deleted.
  /api/v1/accounts/skills/:
    get:
      operationId: accounts_skills_list
      description: List or create skills (admin only).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSkillList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSkillList'
          description: ''
    post:
      operationId: accounts_skills_create
      description: Create a new skill (admin only).
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Skill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
  /api/v1/accounts/skills/{id}/:
    get:
      operationId: accounts_skills_retrieve
      description: Retrieve skill details.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    put:
      operationId: accounts_skills_update
      description: Update skill (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Skill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    patch:
      operationId: accounts_skills_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    delete:
      operationId: accounts_skills_destroy
      description: Delete skill (admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: Skill deleted.
  /api/v1/accounts/token/:
    post:
      operationId: accounts_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/accounts/token/refresh/:
    post:
      operationId: accounts_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/accounts/users/:
    get:
      operationId: accounts_users_list
      description: List or create users (admin only for listing).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: accounts_users_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/accounts/users/{id}/:
    get:
      operationId: accounts_users_retrieve
      description: Retrieve user details.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: accounts_users_update
      description: Update user details (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          description: Invalid input.
    patch:
      operationId: accounts_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: accounts_users_destroy
      description: Delete user account (owner or admin only).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: User deleted.
  /api/v1/core/attachments/:
    get:
      operationId: core_attachments_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageAttachmentList'
          description: ''
    post:
      operationId: core_attachments_create
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageAttachment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageAttachment'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageAttachment'
          description: ''
  /api/v1/core/attachments/{id}/:
    get:
      operationId: core_attachments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message attachment.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageAttachment'
          description: ''
    put:
      operationId: core_attachments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message attachment.
        required: true
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageAttachment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageAttachment'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageAttachment'
          description: ''
    patch:
      operationId: core_attachments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message attachment.
        required: true
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessageAttachment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessageAttachment'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageAttachment'
          description: ''
    delete:
      operationId: core_attachments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message attachment.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/core/attachments/{id}/download/:
    get:
      operationId: core_attachments_download_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message attachment.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: File downloaded
        '403':
          description: Unauthorized
  /api/v1/core/chats/:
    get:
      operationId: core_chats_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatList'
          description: ''
    post:
      operationId: core_chats_create
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Chat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Chat'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/v1/core/chats/{id}/:
    get:
      operationId: core_chats_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    put:
      operationId: core_chats_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Chat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Chat'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    patch:
      operationId: core_chats_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChat'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    delete:
      operationId: core_chats_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/core/jobs/:
    get:
      operationId: core_jobs_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobList'
          description: ''
    post:
      operationId: core_jobs_create
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
  /api/v1/core/jobs/{id}/:
    get:
      operationId: core_jobs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    put:
      operationId: core_jobs_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    patch:
      operationId: core_jobs_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJob'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    delete:
      operationId: core_jobs_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/core/jobs/{id}/mark_completed/:
    post:
      operationId: core_jobs_mark_completed_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: Job marked as completed
        '403':
          description: Permission denied
        '404':
          description: Job not found
  /api/v1/core/jobs/{id}/matches/:
    get:
      operationId: core_jobs_matches_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: List of matched freelancers with scores
  /api/v1/core/messages/:
    get:
      operationId: core_messages_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageList'
          description: ''
    post:
      operationId: core_messages_create
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/v1/core/messages/{id}/:
    get:
      operationId: core_messages_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    put:
      operationId: core_messages_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    patch:
      operationId: core_messages_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    delete:
      operationId: core_messages_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this message.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/core/recommendations/:
    get:
      operationId: core_recommendations_list
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: List of recommended jobs with scores
        '404':
          description: Freelancer profile not found
  /api/v1/core/responses/:
    get:
      operationId: core_responses_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseList'
          description: ''
    post:
      operationId: core_responses_create
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
  /api/v1/core/responses/{id}/:
    get:
      operationId: core_responses_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this response.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    put:
      operationId: core_responses_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this response.
        required: true
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    patch:
      operationId: core_responses_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this response.
        required: true
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResponse'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResponse'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    delete:
      operationId: core_responses_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this response.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/core/responses/{id}/accept/:
    post:
      operationId: core_responses_accept_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this response.
        required: true
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: Response accepted, chat created
        '403':
          description: Unauthorized
  /api/v1/core/responses/{id}/reject/:
    post:
      operationId: core_responses_reject_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this response.
        required: true
      tags:
      - core
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: Response rejected
        '403':
          description: Unauthorized
  /api/v1/core/reviews/:
    get:
      operationId: core_reviews_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
    post:
      operationId: core_reviews_create
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/v1/core/reviews/{id}/:
    get:
      operationId: core_reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: core_reviews_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: core_reviews_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - core
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: core_reviews_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - core
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/invoicemanagement/invoices/:
    get:
      operationId: invoicemanagement_invoices_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - invoicemanagement
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInvoiceList'
          description: ''
    post:
      operationId: invoicemanagement_invoices_create
      tags:
      - invoicemanagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Invoice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Invoice'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
  /api/v1/invoicemanagement/invoices/{invoice_id}/pdf/:
    get:
      operationId: invoicemanagement_invoices_pdf_retrieve
      parameters:
      - in: path
        name: invoice_id
        schema:
          type: integer
        required: true
      tags:
      - invoicemanagement
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/v1/invoicemanagement/invoices/{id}/:
    get:
      operationId: invoicemanagement_invoices_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - invoicemanagement
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
    put:
      operationId: invoicemanagement_invoices_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - invoicemanagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Invoice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Invoice'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
    patch:
      operationId: invoicemanagement_invoices_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - invoicemanagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvoice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInvoice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvoice'
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
    delete:
      operationId: invoicemanagement_invoices_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - invoicemanagement
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    CategoryEnum:
      enum:
      - data_entry
      - translation
      - transcription
      - graphics
      - writing
      - web_dev
      - project_mgmt
      - testing
      - virtual_assist
      - social_media
      - ai_training
      type: string
      description: |-
        * `data_entry` - Data Entry
        * `translation` - Translation
        * `transcription` - Transcription and Captioning
        * `graphics` - Graphics
        * `writing` - Writing and Editing
        * `web_dev` - App and Web Development
        * `project_mgmt` - IT Project Management
        * `testing` - Software Testing
        * `virtual_assist` - Virtual Assistance
        * `social_media` - Social Media Management
        * `ai_training` - AI Model Training
    Chat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        job:
          type: integer
        client:
          type: string
          readOnly: true
        freelancer:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - client
      - created_at
      - freelancer
      - id
      - job
    ClientForm:
      type: object
      properties:
        company_name:
          type: string
          description: Company or client name.
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address.
        phone_number:
          type: string
          description: Phone number.
          maxLength: 20
        industry:
          allOf:
          - $ref: '#/components/schemas/IndustryEnum'
          description: |-
            Industry.

            * `technology` - Technology
            * `finance` - Finance
            * `healthcare` - Healthcare
            * `education` - Education
            * `retail` - Retail
            * `manufacturing` - Manufacturing
            * `entertainment` - Entertainment
            * `marketing` - Marketing
            * `consulting` - Consulting
            * `non_profit` - Non-Profit
            * `government` - Government
            * `legal` - Legal Services
            * `real_estate` - Real Estate
            * `hospitality` - Hospitality
            * `transportation` - Transportation
            * `agriculture` - Agriculture
            * `energy` - Energy
            * `telecom` - Telecommunications
            * `media` - Media
            * `other` - Other
        languages:
          type: array
          items:
            type: integer
          description: Language IDs.
        location:
          type: string
          description: Location (optional).
          maxLength: 100
        pay_id:
          allOf:
          - $ref: '#/components/schemas/PayIdEnum'
          description: |-
            Payment method.

            * `M-Pesa` - M-Pesa
            * `Binance` - Binance
        pay_id_no:
          type: string
          description: Payment ID number.
          maxLength: 20
        company_website:
          type: string
          format: uri
          description: Company website (optional).
        project_budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Project budget in USD.
        preferred_freelancer_level:
          allOf:
          - $ref: '#/components/schemas/PreferredFreelancerLevelEnum'
          description: |-
            Preferred freelancer level.

            * `entry` - Entry Level
            * `intermediate` - Intermediate
            * `expert` - Expert
      required:
      - company_name
      - email
      - industry
      - languages
      - phone_number
      - project_budget
    ClientProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        company_name:
          type: string
          description: Company or client name.
          maxLength: 200
        company_website:
          type: string
          format: uri
          nullable: true
          description: Company website (optional).
          maxLength: 200
        industry:
          description: |-
            Client industry.

            * `technology` - Technology
            * `finance` - Finance
            * `healthcare` - Healthcare
            * `education` - Education
            * `retail` - Retail
            * `manufacturing` - Manufacturing
            * `entertainment` - Entertainment
            * `marketing` - Marketing
            * `consulting` - Consulting
            * `non_profit` - Non-Profit
            * `government` - Government
            * `legal` - Legal Services
            * `real_estate` - Real Estate
            * `hospitality` - Hospitality
            * `transportation` - Transportation
            * `agriculture` - Agriculture
            * `energy` - Energy
            * `telecom` - Telecommunications
            * `media` - Media
            * `other` - Other
          oneOf:
          - $ref: '#/components/schemas/IndustryEnum'
          - $ref: '#/components/schemas/BlankEnum'
        project_budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Project budget in USD.
        preferred_freelancer_level:
          allOf:
          - $ref: '#/components/schemas/PreferredFreelancerLevelEnum'
          description: |-
            Preferred freelancer level.

            * `entry` - Entry Level
            * `intermediate` - Intermediate
            * `expert` - Expert
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguagesEnum'
          readOnly: true
        language_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
          description: List of language IDs.
      required:
      - id
      - language_ids
      - languages
    FreelancerForm:
      type: object
      properties:
        name:
          type: string
          description: Full name.
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address.
        phone_number:
          type: string
          description: Phone number.
          maxLength: 20
        experience_years:
          type: integer
          minimum: 0
          description: Years of experience.
        hourly_rate:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Hourly rate in USD.
        languages:
          type: array
          items:
            type: integer
          description: Language IDs.
        photo:
          type: string
          format: uri
          description: Profile photo (optional).
        id_number:
          type: string
          description: ID number (optional).
          maxLength: 20
        location:
          type: string
          description: Location (optional).
          maxLength: 100
        pay_id:
          allOf:
          - $ref: '#/components/schemas/PayIdEnum'
          description: |-
            Payment method.

            * `M-Pesa` - M-Pesa
            * `Binance` - Binance
        pay_id_no:
          type: string
          description: Payment ID number.
          maxLength: 20
        skills:
          type: array
          items:
            type: integer
          description: Skill IDs.
        portfolio_link:
          type: string
          format: uri
          description: Portfolio URL (optional).
        availability:
          allOf:
          - $ref: '#/components/schemas/FreelancerFormAvailabilityEnum'
          description: |-
            Availability.

            * `full_time` - Full Time
            * `part_time` - Part Time
            * `weekends` - Weekends Only
            * `custom` - Custom Schedule
      required:
      - email
      - experience_years
      - hourly_rate
      - languages
      - name
      - pay_id_no
      - phone_number
      - skills
    FreelancerFormAvailabilityEnum:
      enum:
      - full_time
      - part_time
      - weekends
      - custom
      type: string
      description: |-
        * `full_time` - Full Time
        * `part_time` - Part Time
        * `weekends` - Weekends Only
        * `custom` - Custom Schedule
    FreelancerProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        portfolio_link:
          type: string
          format: uri
          nullable: true
          description: Portfolio URL (optional).
          maxLength: 200
        experience_years:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Years of experience.
        hourly_rate:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Hourly rate in USD.
        availability:
          allOf:
          - $ref: '#/components/schemas/FreelancerProfileAvailabilityEnum'
          description: |-
            Availability (e.g., full_time, part_time).

            * `full_time` - Full Time
            * `part_time` - Part Time
            * `weekends` - Weekends Only
            * `custom` - Custom Schedule
            * `not_available` - Not Available
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillsEnum'
          readOnly: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguagesEnum'
          readOnly: true
        skill_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
          description: List of skill IDs.
        language_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
          description: List of language IDs.
      required:
      - id
      - language_ids
      - languages
      - skill_ids
      - skills
    FreelancerProfileAvailabilityEnum:
      enum:
      - full_time
      - part_time
      - weekends
      - custom
      - not_available
      type: string
      description: |-
        * `full_time` - Full Time
        * `part_time` - Part Time
        * `weekends` - Weekends Only
        * `custom` - Custom Schedule
        * `not_available` - Not Available
    IndustryEnum:
      enum:
      - technology
      - finance
      - healthcare
      - education
      - retail
      - manufacturing
      - entertainment
      - marketing
      - consulting
      - non_profit
      - government
      - legal
      - real_estate
      - hospitality
      - transportation
      - agriculture
      - energy
      - telecom
      - media
      - other
      type: string
      description: |-
        * `technology` - Technology
        * `finance` - Finance
        * `healthcare` - Healthcare
        * `education` - Education
        * `retail` - Retail
        * `manufacturing` - Manufacturing
        * `entertainment` - Entertainment
        * `marketing` - Marketing
        * `consulting` - Consulting
        * `non_profit` - Non-Profit
        * `government` - Government
        * `legal` - Legal Services
        * `real_estate` - Real Estate
        * `hospitality` - Hospitality
        * `transportation` - Transportation
        * `agriculture` - Agriculture
        * `energy` - Energy
        * `telecom` - Telecommunications
        * `media` - Media
        * `other` - Other
    Invoice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        client:
          type: integer
        invoice_number:
          type: integer
          readOnly: true
          nullable: true
        invoice_date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
        status:
          $ref: '#/components/schemas/InvoiceStatusEnum'
        notes:
          type: string
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
      required:
      - client
      - due_date
      - id
      - invoice_number
      - line_items
      - total_amount
    InvoiceLineItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        rate:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
      required:
      - amount
      - description
      - id
      - rate
    InvoiceStatusEnum:
      enum:
      - draft
      - sent
      - paid
      - overdue
      type: string
      description: |-
        * `draft` - Draft
        * `sent` - Sent
        * `paid` - Paid
        * `overdue` - Overdue
    Job:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        category:
          $ref: '#/components/schemas/CategoryEnum'
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        posted_date:
          type: string
          format: date
          readOnly: true
        deadline_date:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        client:
          type: string
          readOnly: true
        max_freelancers:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        preferred_freelancer_level:
          $ref: '#/components/schemas/PreferredFreelancerLevelEnum'
        selected_freelancer:
          type: string
          readOnly: true
          nullable: true
        payment_verified:
          type: boolean
          readOnly: true
      required:
      - category
      - client
      - deadline_date
      - description
      - id
      - payment_verified
      - posted_date
      - price
      - selected_freelancer
      - title
    JobStatusEnum:
      enum:
      - open
      - in_progress
      - completed
      type: string
      description: |-
        * `open` - Open
        * `in_progress` - In Progress
        * `completed` - Completed
    Language:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          allOf:
          - $ref: '#/components/schemas/NameA57Enum'
          description: |-
            Language name (e.g., English, Swahili).

            * `english` - English
            * `swahili` - Swahili
            * `spanish` - Spanish
            * `french` - French
            * `german` - German
            * `italian` - Italian
            * `portuguese` - Portuguese
            * `russian` - Russian
            * `mandarin` - Mandarin Chinese
            * `cantonese` - Cantonese
            * `japanese` - Japanese
            * `korean` - Korean
            * `arabic` - Arabic
            * `hindi` - Hindi
            * `bengali` - Bengali
            * `urdu` - Urdu
            * `dutch` - Dutch
            * `swedish` - Swedish
            * `norwegian` - Norwegian
            * `danish` - Danish
            * `finnish` - Finnish
            * `polish` - Polish
            * `turkish` - Turkish
            * `hebrew` - Hebrew
            * `greek` - Greek
            * `thai` - Thai
            * `vietnamese` - Vietnamese
            * `indonesian` - Indonesian
            * `malay` - Malay
            * `tagalog` - Filipino/Tagalog
            * `czech` - Czech
            * `slovak` - Slovak
            * `hungarian` - Hungarian
            * `romanian` - Romanian
            * `bulgarian` - Bulgarian
            * `ukrainian` - Ukrainian
            * `farsi` - Farsi/Persian
            * `afrikaans` - Afrikaans
            * `amharic` - Amharic
            * `other` - Other
      required:
      - id
      - name
    LanguagesEnum:
      enum:
      - english
      - swahili
      - spanish
      - french
      - german
      - italian
      - portuguese
      - russian
      - mandarin
      - cantonese
      - japanese
      - korean
      - arabic
      - hindi
      - bengali
      - urdu
      - dutch
      - swedish
      - norwegian
      - danish
      - finnish
      - polish
      - turkish
      - hebrew
      - greek
      - thai
      - vietnamese
      - indonesian
      - malay
      - tagalog
      - czech
      - slovak
      - hungarian
      - romanian
      - bulgarian
      - ukrainian
      - farsi
      - afrikaans
      - amharic
      - other
      type: string
      description: |-
        * `english` - English
        * `swahili` - Swahili
        * `spanish` - Spanish
        * `french` - French
        * `german` - German
        * `italian` - Italian
        * `portuguese` - Portuguese
        * `russian` - Russian
        * `mandarin` - Mandarin Chinese
        * `cantonese` - Cantonese
        * `japanese` - Japanese
        * `korean` - Korean
        * `arabic` - Arabic
        * `hindi` - Hindi
        * `bengali` - Bengali
        * `urdu` - Urdu
        * `dutch` - Dutch
        * `swedish` - Swedish
        * `norwegian` - Norwegian
        * `danish` - Danish
        * `finnish` - Finnish
        * `polish` - Polish
        * `turkish` - Turkish
        * `hebrew` - Hebrew
        * `greek` - Greek
        * `thai` - Thai
        * `vietnamese` - Vietnamese
        * `indonesian` - Indonesian
        * `malay` - Malay
        * `tagalog` - Filipino/Tagalog
        * `czech` - Czech
        * `slovak` - Slovak
        * `hungarian` - Hungarian
        * `romanian` - Romanian
        * `bulgarian` - Bulgarian
        * `ukrainian` - Ukrainian
        * `farsi` - Farsi/Persian
        * `afrikaans` - Afrikaans
        * `amharic` - Amharic
        * `other` - Other
    Login:
      type: object
      properties:
        identifier:
          type: string
          description: Username or email.
        password:
          type: string
          writeOnly: true
          description: Password.
      required:
      - identifier
      - password
    Message:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        chat:
          type: integer
        sender:
          type: string
          readOnly: true
        content:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        attachments:
          type: string
          readOnly: true
      required:
      - attachments
      - chat
      - content
      - id
      - sender
      - timestamp
    MessageAttachment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        message:
          type: integer
        file:
          type: string
          format: uri
        filename:
          type: string
          readOnly: true
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        file_size:
          type: integer
          readOnly: true
        content_type:
          type: string
          readOnly: true
      required:
      - content_type
      - file
      - file_size
      - filename
      - id
      - message
      - uploaded_at
    Name495Enum:
      enum:
      - python
      - javascript
      - java
      - csharp
      - cpp
      - php
      - ruby
      - swift
      - kotlin
      - go
      - rust
      - typescript
      - html
      - css
      - react
      - angular
      - vue
      - django
      - flask
      - nodejs
      - express
      - spring
      - laravel
      - aspnet
      - jquery
      - bootstrap
      - tailwind
      - android
      - ios
      - flutter
      - reactnative
      - xamarin
      - sql
      - mysql
      - postgresql
      - mongodb
      - oracle
      - firebase
      - redis
      - aws
      - azure
      - gcp
      - docker
      - kubernetes
      - jenkins
      - gitops
      - terraform
      - ansible
      - python_data
      - r
      - machine_learning
      - deep_learning
      - tensorflow
      - pytorch
      - pandas
      - numpy
      - scikit
      - nlp
      - computer_vision
      - uiux
      - graphic_design
      - figma
      - adobe_xd
      - sketch
      - photoshop
      - illustrator
      - agile
      - scrum
      - kanban
      - jira
      - confluence
      - trello
      - asana
      - git
      - testing
      - devops
      - cybersecurity
      - blockchain
      - seo
      - data_analysis
      - technical_writing
      type: string
      description: |-
        * `python` - Python
        * `javascript` - JavaScript
        * `java` - Java
        * `csharp` - C#
        * `cpp` - C++
        * `php` - PHP
        * `ruby` - Ruby
        * `swift` - Swift
        * `kotlin` - Kotlin
        * `go` - Go
        * `rust` - Rust
        * `typescript` - TypeScript
        * `html` - HTML
        * `css` - CSS
        * `react` - React
        * `angular` - Angular
        * `vue` - Vue.js
        * `django` - Django
        * `flask` - Flask
        * `nodejs` - Node.js
        * `express` - Express.js
        * `spring` - Spring Boot
        * `laravel` - Laravel
        * `aspnet` - ASP.NET
        * `jquery` - jQuery
        * `bootstrap` - Bootstrap
        * `tailwind` - Tailwind CSS
        * `android` - Android Development
        * `ios` - iOS Development
        * `flutter` - Flutter
        * `reactnative` - React Native
        * `xamarin` - Xamarin
        * `sql` - SQL
        * `mysql` - MySQL
        * `postgresql` - PostgreSQL
        * `mongodb` - MongoDB
        * `oracle` - Oracle
        * `firebase` - Firebase
        * `redis` - Redis
        * `aws` - AWS
        * `azure` - Microsoft Azure
        * `gcp` - Google Cloud
        * `docker` - Docker
        * `kubernetes` - Kubernetes
        * `jenkins` - Jenkins
        * `gitops` - GitOps
        * `terraform` - Terraform
        * `ansible` - Ansible
        * `python_data` - Python for Data Science
        * `r` - R Programming
        * `machine_learning` - Machine Learning
        * `deep_learning` - Deep Learning
        * `tensorflow` - TensorFlow
        * `pytorch` - PyTorch
        * `pandas` - Pandas
        * `numpy` - NumPy
        * `scikit` - Scikit-Learn
        * `nlp` - Natural Language Processing
        * `computer_vision` - Computer Vision
        * `uiux` - UI/UX Design
        * `graphic_design` - Graphic Design
        * `figma` - Figma
        * `adobe_xd` - Adobe XD
        * `sketch` - Sketch
        * `photoshop` - Adobe Photoshop
        * `illustrator` - Adobe Illustrator
        * `agile` - Agile Methodology
        * `scrum` - Scrum
        * `kanban` - Kanban
        * `jira` - Jira
        * `confluence` - Confluence
        * `trello` - Trello
        * `asana` - Asana
        * `git` - Git
        * `testing` - Software Testing
        * `devops` - DevOps
        * `cybersecurity` - Cybersecurity
        * `blockchain` - Blockchain
        * `seo` - SEO
        * `data_analysis` - Data Analysis
        * `technical_writing` - Technical Writing
    NameA57Enum:
      enum:
      - english
      - swahili
      - spanish
      - french
      - german
      - italian
      - portuguese
      - russian
      - mandarin
      - cantonese
      - japanese
      - korean
      - arabic
      - hindi
      - bengali
      - urdu
      - dutch
      - swedish
      - norwegian
      - danish
      - finnish
      - polish
      - turkish
      - hebrew
      - greek
      - thai
      - vietnamese
      - indonesian
      - malay
      - tagalog
      - czech
      - slovak
      - hungarian
      - romanian
      - bulgarian
      - ukrainian
      - farsi
      - afrikaans
      - amharic
      - other
      type: string
      description: |-
        * `english` - English
        * `swahili` - Swahili
        * `spanish` - Spanish
        * `french` - French
        * `german` - German
        * `italian` - Italian
        * `portuguese` - Portuguese
        * `russian` - Russian
        * `mandarin` - Mandarin Chinese
        * `cantonese` - Cantonese
        * `japanese` - Japanese
        * `korean` - Korean
        * `arabic` - Arabic
        * `hindi` - Hindi
        * `bengali` - Bengali
        * `urdu` - Urdu
        * `dutch` - Dutch
        * `swedish` - Swedish
        * `norwegian` - Norwegian
        * `danish` - Danish
        * `finnish` - Finnish
        * `polish` - Polish
        * `turkish` - Turkish
        * `hebrew` - Hebrew
        * `greek` - Greek
        * `thai` - Thai
        * `vietnamese` - Vietnamese
        * `indonesian` - Indonesian
        * `malay` - Malay
        * `tagalog` - Filipino/Tagalog
        * `czech` - Czech
        * `slovak` - Slovak
        * `hungarian` - Hungarian
        * `romanian` - Romanian
        * `bulgarian` - Bulgarian
        * `ukrainian` - Ukrainian
        * `farsi` - Farsi/Persian
        * `afrikaans` - Afrikaans
        * `amharic` - Amharic
        * `other` - Other
    PaginatedChatList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
    PaginatedClientProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ClientProfile'
    PaginatedFreelancerProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FreelancerProfile'
    PaginatedInvoiceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
    PaginatedJobList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    PaginatedLanguageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Language'
    PaginatedMessageAttachmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachment'
    PaginatedMessageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    PaginatedProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
    PaginatedResponseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Response'
    PaginatedReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    PaginatedSkillList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
    PaginatedTrainingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Training'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          writeOnly: true
          description: New password.
        new_password2:
          type: string
          writeOnly: true
          description: Confirm new password.
      required:
      - new_password1
      - new_password2
    PasswordResetConfirm:
      type: object
      properties:
        uidb64:
          type: string
          description: Encoded user ID.
        token:
          type: string
          description: Password reset token.
        new_password:
          type: string
          writeOnly: true
          description: New password.
      required:
      - new_password
      - token
      - uidb64
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email for password reset.
      required:
      - email
    PatchedChat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        job:
          type: integer
        client:
          type: string
          readOnly: true
        freelancer:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedClientProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        company_name:
          type: string
          description: Company or client name.
          maxLength: 200
        company_website:
          type: string
          format: uri
          nullable: true
          description: Company website (optional).
          maxLength: 200
        industry:
          description: |-
            Client industry.

            * `technology` - Technology
            * `finance` - Finance
            * `healthcare` - Healthcare
            * `education` - Education
            * `retail` - Retail
            * `manufacturing` - Manufacturing
            * `entertainment` - Entertainment
            * `marketing` - Marketing
            * `consulting` - Consulting
            * `non_profit` - Non-Profit
            * `government` - Government
            * `legal` - Legal Services
            * `real_estate` - Real Estate
            * `hospitality` - Hospitality
            * `transportation` - Transportation
            * `agriculture` - Agriculture
            * `energy` - Energy
            * `telecom` - Telecommunications
            * `media` - Media
            * `other` - Other
          oneOf:
          - $ref: '#/components/schemas/IndustryEnum'
          - $ref: '#/components/schemas/BlankEnum'
        project_budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Project budget in USD.
        preferred_freelancer_level:
          allOf:
          - $ref: '#/components/schemas/PreferredFreelancerLevelEnum'
          description: |-
            Preferred freelancer level.

            * `entry` - Entry Level
            * `intermediate` - Intermediate
            * `expert` - Expert
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguagesEnum'
          readOnly: true
        language_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
          description: List of language IDs.
    PatchedFreelancerProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        portfolio_link:
          type: string
          format: uri
          nullable: true
          description: Portfolio URL (optional).
          maxLength: 200
        experience_years:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Years of experience.
        hourly_rate:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Hourly rate in USD.
        availability:
          allOf:
          - $ref: '#/components/schemas/FreelancerProfileAvailabilityEnum'
          description: |-
            Availability (e.g., full_time, part_time).

            * `full_time` - Full Time
            * `part_time` - Part Time
            * `weekends` - Weekends Only
            * `custom` - Custom Schedule
            * `not_available` - Not Available
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillsEnum'
          readOnly: true
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguagesEnum'
          readOnly: true
        skill_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
          description: List of skill IDs.
        language_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
          description: List of language IDs.
    PatchedInvoice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        client:
          type: integer
        invoice_number:
          type: integer
          readOnly: true
          nullable: true
        invoice_date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
        status:
          $ref: '#/components/schemas/InvoiceStatusEnum'
        notes:
          type: string
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
    PatchedJob:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        category:
          $ref: '#/components/schemas/CategoryEnum'
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        posted_date:
          type: string
          format: date
          readOnly: true
        deadline_date:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        client:
          type: string
          readOnly: true
        max_freelancers:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        preferred_freelancer_level:
          $ref: '#/components/schemas/PreferredFreelancerLevelEnum'
        selected_freelancer:
          type: string
          readOnly: true
          nullable: true
        payment_verified:
          type: boolean
          readOnly: true
    PatchedLanguage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          allOf:
          - $ref: '#/components/schemas/NameA57Enum'
          description: |-
            Language name (e.g., English, Swahili).

            * `english` - English
            * `swahili` - Swahili
            * `spanish` - Spanish
            * `french` - French
            * `german` - German
            * `italian` - Italian
            * `portuguese` - Portuguese
            * `russian` - Russian
            * `mandarin` - Mandarin Chinese
            * `cantonese` - Cantonese
            * `japanese` - Japanese
            * `korean` - Korean
            * `arabic` - Arabic
            * `hindi` - Hindi
            * `bengali` - Bengali
            * `urdu` - Urdu
            * `dutch` - Dutch
            * `swedish` - Swedish
            * `norwegian` - Norwegian
            * `danish` - Danish
            * `finnish` - Finnish
            * `polish` - Polish
            * `turkish` - Turkish
            * `hebrew` - Hebrew
            * `greek` - Greek
            * `thai` - Thai
            * `vietnamese` - Vietnamese
            * `indonesian` - Indonesian
            * `malay` - Malay
            * `tagalog` - Filipino/Tagalog
            * `czech` - Czech
            * `slovak` - Slovak
            * `hungarian` - Hungarian
            * `romanian` - Romanian
            * `bulgarian` - Bulgarian
            * `ukrainian` - Ukrainian
            * `farsi` - Farsi/Persian
            * `afrikaans` - Afrikaans
            * `amharic` - Amharic
            * `other` - Other
    PatchedMessage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        chat:
          type: integer
        sender:
          type: string
          readOnly: true
        content:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        attachments:
          type: string
          readOnly: true
    PatchedMessageAttachment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        message:
          type: integer
        file:
          type: string
          format: uri
        filename:
          type: string
          readOnly: true
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        file_size:
          type: integer
          readOnly: true
        content_type:
          type: string
          readOnly: true
    PatchedProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        phone:
          type: string
          description: Phone number.
          maxLength: 20
        location:
          type: string
          description: Location (optional).
          maxLength: 200
        bio:
          type: string
          description: Biography (optional).
        profile_pic:
          type: string
          format: uri
          nullable: true
          description: Profile picture (optional).
        pay_id:
          allOf:
          - $ref: '#/components/schemas/PayIdEnum'
          description: |-
            Payment method (M-Pesa or Binance).

            * `M-Pesa` - M-Pesa
            * `Binance` - Binance
        pay_id_no:
          type: string
          description: Payment ID number.
          maxLength: 20
        id_card:
          type: string
          description: ID card number (optional).
          maxLength: 10
        user_type:
          allOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          readOnly: true
          default: freelancer
          description: |-
            User type (freelancer or client).

            * `freelancer` - Freelancer
            * `client` - Client
    PatchedResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        job:
          type: integer
        submitted_at:
          type: string
          format: date-time
          readOnly: true
        extra_data:
          nullable: true
        sample_work_file:
          type: string
          format: uri
          writeOnly: true
          nullable: true
    PatchedReview:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        reviewer:
          type: string
          readOnly: true
        recipient:
          type: integer
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          minimum: 1
          maximum: 5
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedSkill:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          allOf:
          - $ref: '#/components/schemas/Name495Enum'
          description: |-
            Skill name (e.g., Python, Django).

            * `python` - Python
            * `javascript` - JavaScript
            * `java` - Java
            * `csharp` - C#
            * `cpp` - C++
            * `php` - PHP
            * `ruby` - Ruby
            * `swift` - Swift
            * `kotlin` - Kotlin
            * `go` - Go
            * `rust` - Rust
            * `typescript` - TypeScript
            * `html` - HTML
            * `css` - CSS
            * `react` - React
            * `angular` - Angular
            * `vue` - Vue.js
            * `django` - Django
            * `flask` - Flask
            * `nodejs` - Node.js
            * `express` - Express.js
            * `spring` - Spring Boot
            * `laravel` - Laravel
            * `aspnet` - ASP.NET
            * `jquery` - jQuery
            * `bootstrap` - Bootstrap
            * `tailwind` - Tailwind CSS
            * `android` - Android Development
            * `ios` - iOS Development
            * `flutter` - Flutter
            * `reactnative` - React Native
            * `xamarin` - Xamarin
            * `sql` - SQL
            * `mysql` - MySQL
            * `postgresql` - PostgreSQL
            * `mongodb` - MongoDB
            * `oracle` - Oracle
            * `firebase` - Firebase
            * `redis` - Redis
            * `aws` - AWS
            * `azure` - Microsoft Azure
            * `gcp` - Google Cloud
            * `docker` - Docker
            * `kubernetes` - Kubernetes
            * `jenkins` - Jenkins
            * `gitops` - GitOps
            * `terraform` - Terraform
            * `ansible` - Ansible
            * `python_data` - Python for Data Science
            * `r` - R Programming
            * `machine_learning` - Machine Learning
            * `deep_learning` - Deep Learning
            * `tensorflow` - TensorFlow
            * `pytorch` - PyTorch
            * `pandas` - Pandas
            * `numpy` - NumPy
            * `scikit` - Scikit-Learn
            * `nlp` - Natural Language Processing
            * `computer_vision` - Computer Vision
            * `uiux` - UI/UX Design
            * `graphic_design` - Graphic Design
            * `figma` - Figma
            * `adobe_xd` - Adobe XD
            * `sketch` - Sketch
            * `photoshop` - Adobe Photoshop
            * `illustrator` - Adobe Illustrator
            * `agile` - Agile Methodology
            * `scrum` - Scrum
            * `kanban` - Kanban
            * `jira` - Jira
            * `confluence` - Confluence
            * `trello` - Trello
            * `asana` - Asana
            * `git` - Git
            * `testing` - Software Testing
            * `devops` - DevOps
            * `cybersecurity` - Cybersecurity
            * `blockchain` - Blockchain
            * `seo` - SEO
            * `data_analysis` - Data Analysis
            * `technical_writing` - Technical Writing
    PatchedTraining:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        texts:
          type: string
        pdf_document:
          type: string
          format: uri
          nullable: true
        video_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        job:
          type: integer
        client:
          type: integer
          nullable: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    PayIdEnum:
      enum:
      - M-Pesa
      - Binance
      type: string
      description: |-
        * `M-Pesa` - M-Pesa
        * `Binance` - Binance
    PreferredFreelancerLevelEnum:
      enum:
      - entry
      - intermediate
      - expert
      type: string
      description: |-
        * `entry` - Entry Level
        * `intermediate` - Intermediate
        * `expert` - Expert
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        phone:
          type: string
          description: Phone number.
          maxLength: 20
        location:
          type: string
          description: Location (optional).
          maxLength: 200
        bio:
          type: string
          description: Biography (optional).
        profile_pic:
          type: string
          format: uri
          nullable: true
          description: Profile picture (optional).
        pay_id:
          allOf:
          - $ref: '#/components/schemas/PayIdEnum'
          description: |-
            Payment method (M-Pesa or Binance).

            * `M-Pesa` - M-Pesa
            * `Binance` - Binance
        pay_id_no:
          type: string
          description: Payment ID number.
          maxLength: 20
        id_card:
          type: string
          description: ID card number (optional).
          maxLength: 10
        user_type:
          allOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          readOnly: true
          default: freelancer
          description: |-
            User type (freelancer or client).

            * `freelancer` - Freelancer
            * `client` - Client
      required:
      - id
      - user
      - user_type
    RatingEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `1` - 1 - Poor
        * `2` - 2 - Below Average
        * `3` - 3 - Average
        * `4` - 4 - Good
        * `5` - 5 - Excellent
    Register:
      type: object
      properties:
        username:
          type: string
          description: Unique username.
          maxLength: 150
        email:
          type: string
          format: email
          description: Unique email address.
        password1:
          type: string
          writeOnly: true
          description: Password (minimum 8 characters).
        password2:
          type: string
          writeOnly: true
          description: Confirm password.
        user_type:
          allOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          description: |-
            User type.

            * `freelancer` - Freelancer
            * `client` - Client
      required:
      - email
      - password1
      - password2
      - user_type
      - username
    Response:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        job:
          type: integer
        submitted_at:
          type: string
          format: date-time
          readOnly: true
        extra_data:
          nullable: true
        sample_work_file:
          type: string
          format: uri
          writeOnly: true
          nullable: true
      required:
      - id
      - job
      - submitted_at
      - user
    Review:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        reviewer:
          type: string
          readOnly: true
        recipient:
          type: integer
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          minimum: 1
          maximum: 5
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - created_at
      - id
      - rating
      - recipient
      - reviewer
      - updated_at
    Skill:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          allOf:
          - $ref: '#/components/schemas/Name495Enum'
          description: |-
            Skill name (e.g., Python, Django).

            * `python` - Python
            * `javascript` - JavaScript
            * `java` - Java
            * `csharp` - C#
            * `cpp` - C++
            * `php` - PHP
            * `ruby` - Ruby
            * `swift` - Swift
            * `kotlin` - Kotlin
            * `go` - Go
            * `rust` - Rust
            * `typescript` - TypeScript
            * `html` - HTML
            * `css` - CSS
            * `react` - React
            * `angular` - Angular
            * `vue` - Vue.js
            * `django` - Django
            * `flask` - Flask
            * `nodejs` - Node.js
            * `express` - Express.js
            * `spring` - Spring Boot
            * `laravel` - Laravel
            * `aspnet` - ASP.NET
            * `jquery` - jQuery
            * `bootstrap` - Bootstrap
            * `tailwind` - Tailwind CSS
            * `android` - Android Development
            * `ios` - iOS Development
            * `flutter` - Flutter
            * `reactnative` - React Native
            * `xamarin` - Xamarin
            * `sql` - SQL
            * `mysql` - MySQL
            * `postgresql` - PostgreSQL
            * `mongodb` - MongoDB
            * `oracle` - Oracle
            * `firebase` - Firebase
            * `redis` - Redis
            * `aws` - AWS
            * `azure` - Microsoft Azure
            * `gcp` - Google Cloud
            * `docker` - Docker
            * `kubernetes` - Kubernetes
            * `jenkins` - Jenkins
            * `gitops` - GitOps
            * `terraform` - Terraform
            * `ansible` - Ansible
            * `python_data` - Python for Data Science
            * `r` - R Programming
            * `machine_learning` - Machine Learning
            * `deep_learning` - Deep Learning
            * `tensorflow` - TensorFlow
            * `pytorch` - PyTorch
            * `pandas` - Pandas
            * `numpy` - NumPy
            * `scikit` - Scikit-Learn
            * `nlp` - Natural Language Processing
            * `computer_vision` - Computer Vision
            * `uiux` - UI/UX Design
            * `graphic_design` - Graphic Design
            * `figma` - Figma
            * `adobe_xd` - Adobe XD
            * `sketch` - Sketch
            * `photoshop` - Adobe Photoshop
            * `illustrator` - Adobe Illustrator
            * `agile` - Agile Methodology
            * `scrum` - Scrum
            * `kanban` - Kanban
            * `jira` - Jira
            * `confluence` - Confluence
            * `trello` - Trello
            * `asana` - Asana
            * `git` - Git
            * `testing` - Software Testing
            * `devops` - DevOps
            * `cybersecurity` - Cybersecurity
            * `blockchain` - Blockchain
            * `seo` - SEO
            * `data_analysis` - Data Analysis
            * `technical_writing` - Technical Writing
      required:
      - id
      - name
    SkillsEnum:
      enum:
      - python
      - javascript
      - java
      - csharp
      - cpp
      - php
      - ruby
      - swift
      - kotlin
      - go
      - rust
      - typescript
      - html
      - css
      - react
      - angular
      - vue
      - django
      - flask
      - nodejs
      - express
      - spring
      - laravel
      - aspnet
      - jquery
      - bootstrap
      - tailwind
      - android
      - ios
      - flutter
      - reactnative
      - xamarin
      - sql
      - mysql
      - postgresql
      - mongodb
      - oracle
      - firebase
      - redis
      - aws
      - azure
      - gcp
      - docker
      - kubernetes
      - jenkins
      - gitops
      - terraform
      - ansible
      - python_data
      - r
      - machine_learning
      - deep_learning
      - tensorflow
      - pytorch
      - pandas
      - numpy
      - scikit
      - nlp
      - computer_vision
      - uiux
      - graphic_design
      - figma
      - adobe_xd
      - sketch
      - photoshop
      - illustrator
      - agile
      - scrum
      - kanban
      - jira
      - confluence
      - trello
      - asana
      - git
      - testing
      - devops
      - cybersecurity
      - blockchain
      - seo
      - data_analysis
      - technical_writing
      type: string
      description: |-
        * `python` - Python
        * `javascript` - JavaScript
        * `java` - Java
        * `csharp` - C#
        * `cpp` - C++
        * `php` - PHP
        * `ruby` - Ruby
        * `swift` - Swift
        * `kotlin` - Kotlin
        * `go` - Go
        * `rust` - Rust
        * `typescript` - TypeScript
        * `html` - HTML
        * `css` - CSS
        * `react` - React
        * `angular` - Angular
        * `vue` - Vue.js
        * `django` - Django
        * `flask` - Flask
        * `nodejs` - Node.js
        * `express` - Express.js
        * `spring` - Spring Boot
        * `laravel` - Laravel
        * `aspnet` - ASP.NET
        * `jquery` - jQuery
        * `bootstrap` - Bootstrap
        * `tailwind` - Tailwind CSS
        * `android` - Android Development
        * `ios` - iOS Development
        * `flutter` - Flutter
        * `reactnative` - React Native
        * `xamarin` - Xamarin
        * `sql` - SQL
        * `mysql` - MySQL
        * `postgresql` - PostgreSQL
        * `mongodb` - MongoDB
        * `oracle` - Oracle
        * `firebase` - Firebase
        * `redis` - Redis
        * `aws` - AWS
        * `azure` - Microsoft Azure
        * `gcp` - Google Cloud
        * `docker` - Docker
        * `kubernetes` - Kubernetes
        * `jenkins` - Jenkins
        * `gitops` - GitOps
        * `terraform` - Terraform
        * `ansible` - Ansible
        * `python_data` - Python for Data Science
        * `r` - R Programming
        * `machine_learning` - Machine Learning
        * `deep_learning` - Deep Learning
        * `tensorflow` - TensorFlow
        * `pytorch` - PyTorch
        * `pandas` - Pandas
        * `numpy` - NumPy
        * `scikit` - Scikit-Learn
        * `nlp` - Natural Language Processing
        * `computer_vision` - Computer Vision
        * `uiux` - UI/UX Design
        * `graphic_design` - Graphic Design
        * `figma` - Figma
        * `adobe_xd` - Adobe XD
        * `sketch` - Sketch
        * `photoshop` - Adobe Photoshop
        * `illustrator` - Adobe Illustrator
        * `agile` - Agile Methodology
        * `scrum` - Scrum
        * `kanban` - Kanban
        * `jira` - Jira
        * `confluence` - Confluence
        * `trello` - Trello
        * `asana` - Asana
        * `git` - Git
        * `testing` - Software Testing
        * `devops` - DevOps
        * `cybersecurity` - Cybersecurity
        * `blockchain` - Blockchain
        * `seo` - SEO
        * `data_analysis` - Data Analysis
        * `technical_writing` - Technical Writing
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    Training:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        texts:
          type: string
        pdf_document:
          type: string
          format: uri
          nullable: true
        video_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        job:
          type: integer
        client:
          type: integer
          nullable: true
      required:
      - id
      - job
      - texts
      - title
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - id
      - username
    UserTypeEnum:
      enum:
      - freelancer
      - client
      type: string
      description: |-
        * `freelancer` - Freelancer
        * `client` - Client
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
