@extend_schema(
    summary="Freelancer Job Status Overview",
    description="""
        Get jobs filtered by status for the authenticated freelancer.
        Supports filters for:
        - status: applied, rejected, selected, in_progress, completed, open
        - ordering by posted date or other fields
        Returns job listings along with stats (application counts, rejections, active, completed, bookmarks).
        """,
    parameters=[
        OpenApiParameter(name='status', description="Job status filter", required=False,
                            type=str, enum=['applied', 'rejected', 'selected', 'in_progress', 'completed', 'open']),
        OpenApiParameter(
            name='ordering', description="Order jobs by field (e.g. -posted_date)", required=False, type=str),
        OpenApiParameter(
            name='page', description="Page number for pagination", required=False, type=int),
    ],
    responses={
        200: OpenApiResponse(description="Paginated job list with freelancer status summary"),
        400: OpenApiResponse(description="Invalid status filter or request"),
        403: OpenApiResponse(description="Access denied for non-freelancers"),
    },
    tags=["Jobs", "Freelancer"]
)
class FreelancerJobStatusView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user
        profile = user.profile
        if profile.user_type != 'freelancer':
            return DRFResponse({'detail': 'Only freelancers can access this endpoint.'},
                            status=status.HTTP_403_FORBIDDEN)

        status_filter = request.query_params.get('status')
        if status_filter == 'active':
            status_filter = 'in_progress'

        try:
            filters = get_job_filters(request)
        except ValueError as e:
            return DRFResponse({'detail': str(e)}, status=status.HTTP_400_BAD_REQUEST)

        ordering = request.query_params.get('ordering', '-posted_date')
        paginator = PageNumberPagination()
        paginator.page_size = 10

        bookmarked_ids = set(user.bookmarks.values_list('job_id', flat=True))
        applied_ids = set(JobResponse.objects.filter(
            user=user).values_list('job_id', flat=True))

        base_queryset = Job.objects.filter(Q(responses__user=user) | Q(
            id__in=bookmarked_ids)).filter(filters).distinct()
        total_applied = base_queryset.filter(responses__user=user).count()
        total_bookmarked = base_queryset.filter(id__in=bookmarked_ids).count()
        total_rejected = base_queryset.filter(
            responses__user=user).exclude(selected_freelancer=user).count()
        total_selected = base_queryset.filter(selected_freelancer=user).count()
        total_active = base_queryset.filter(
            status='in_progress', selected_freelancer=user).count()
        total_completed = base_queryset.filter(
            status='completed', selected_freelancer=user).count()

        stats = {
            'total_applications': total_applied,
            'total_rejections': total_rejected,
            'total_selected': total_selected,
            'total_active': total_active,
            'total_completed': total_completed,
            'total_bookmarked': total_bookmarked,
        }

        if not status_filter or status_filter == 'applied':
            jobs = Job.objects.filter(responses__user=user).filter(
                filters).distinct().order_by(ordering)
            paginated = paginator.paginate_queryset(jobs, request)
            serializer = JobSearchSerializer(paginated, many=True, context={
                'bookmarked_ids': bookmarked_ids,
                'applied_ids': applied_ids
            })
            return paginator.get_paginated_response({
                'status': 'applied',
                'job_count': jobs.count(),
                'jobs': serializer.data,
                **stats
            })

        if status_filter == 'rejected':
            jobs = Job.objects.filter(responses__user=user).exclude(
                selected_freelancer=user).filter(filters).distinct().order_by(ordering)
            paginated = paginator.paginate_queryset(jobs, request)
            serializer = JobSearchSerializer(paginated, many=True, context={
                'bookmarked_ids': bookmarked_ids,
                'applied_ids': applied_ids
            })
            return paginator.get_paginated_response({
                'status': 'rejected',
                'job_count': jobs.count(),
                'jobs': serializer.data,
                **stats
            })

        if status_filter in ['in_progress', 'completed']:
            jobs = Job.objects.filter(selected_freelancer=user, status=status_filter).filter(
                filters).order_by(ordering)
            paginated = paginator.paginate_queryset(jobs, request)
            serializer = JobSearchSerializer(paginated, many=True, context={
                'bookmarked_ids': bookmarked_ids,
                'applied_ids': applied_ids
            })
            return paginator.get_paginated_response({
                'status': status_filter,
                'job_count': jobs.count(),
                'jobs': serializer.data,
                **stats
            })

        if status_filter == 'selected':
            jobs = Job.objects.filter(selected_freelancer=user).filter(
                filters).order_by(ordering)
            paginated = paginator.paginate_queryset(jobs, request)
            serializer = JobSearchSerializer(paginated, many=True, context={
                'bookmarked_ids': bookmarked_ids,
                'applied_ids': applied_ids
            })
            return paginator.get_paginated_response({
                'status': 'selected',
                'job_count': jobs.count(),
                'jobs': serializer.data,
                **stats
            })

        if status_filter == 'open':
            jobs = Job.objects.filter(status='open').filter(
                filters).order_by(ordering)
            paginated = paginator.paginate_queryset(jobs, request)
            serializer = JobSearchSerializer(paginated, many=True, context={
                'bookmarked_ids': bookmarked_ids,
                'applied_ids': applied_ids
            })
            return paginator.get_paginated_response({
                'status': 'open',
                'job_count': jobs.count(),
                'jobs': serializer.data,
                **stats
            })

        return DRFResponse({'detail': 'Invalid status filter.'}, status=status.HTTP_400_BAD_REQUEST)

